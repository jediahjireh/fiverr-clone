generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  username      String    @unique
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  country       String?
  phone         String?
  description   String?
  isSeller      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts            Account[]
  sessions            Session[]
  gigs                Gig[]
  orders              Order[]        @relation("OrderBuyer")
  sellerOrders        Order[]        @relation("OrderSeller")
  reviews             Review[]
  sellerConversations Conversation[] @relation("ConversationSeller")
  buyerConversations  Conversation[] @relation("ConversationBuyer")

  messages Message[]

  @@map("users")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Gig {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  userId         String   @db.ObjectId
  title          String
  description    String
  shortTitle     String
  shortDesc      String
  category       String
  price          Int
  cover          String
  images         String[]
  deliveryTime   Int
  revisionNumber Int
  features       String[]
  totalStars     Int      @default(0)
  starNumber     Int      @default(0)
  sales          Int      @default(0)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orders  Order[]
  reviews Review[]

  @@map("gigs")
}

model Order {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  gigId         String   @db.ObjectId
  buyerId       String   @db.ObjectId
  sellerId      String   @db.ObjectId
  title         String
  price         Int
  image         String?
  paymentIntent String   @unique
  isCompleted   Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  gig    Gig  @relation(fields: [gigId], references: [id], onDelete: Cascade)
  buyer  User @relation("OrderBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  seller User @relation("OrderSeller", fields: [sellerId], references: [id], onDelete: Cascade)

  @@map("orders")
}

model Review {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  gigId     String   @db.ObjectId
  userId    String   @db.ObjectId
  star      Int
  desc      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  gig  Gig  @relation(fields: [gigId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([gigId, userId])
  @@map("reviews")
}

model Conversation {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sellerId     String   @db.ObjectId
  buyerId      String   @db.ObjectId
  readBySeller Boolean  @default(false)
  readByBuyer  Boolean  @default(false)
  lastMessage  String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  seller   User      @relation("ConversationSeller", fields: [sellerId], references: [id], onDelete: Cascade)
  buyer    User      @relation("ConversationBuyer", fields: [buyerId], references: [id], onDelete: Cascade)
  messages Message[]

  @@unique([sellerId, buyerId])
  @@map("conversations")
}

model Message {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  conversationId String   @db.ObjectId
  userId         String   @db.ObjectId
  desc           String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("messages")
}
